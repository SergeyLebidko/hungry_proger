{"header": [], "body": ["Как начинающий разработчик-самоучка я, естественно, пока не могу похвастаться\nдоскональным знанием какого-либо языка, библиотеки или фреймворка. Для этого нужны\nгоды работы на реальных проектах, но, тем не менее, я уже успел познакомится с некоторыми\nшироко распространенными технологиями, понять зачем они нужны и какие задачи решают и хочу\nнемного рассказать об этом своем опыте.\n", "\nПервым языком программирования, который я начал изучать была Java. Сейчас я уже не занимаюсь этим\nязыком, так как полностью перешел на Python и JS (и не вижу ни одной причины, по которой Java\nбыла бы лучше Python), но я не считаю, что зря потратил время работая с этим языком.\n", "\nРаботая с Java я изучил основные концепции ООП, узнал что такое статическая и динамическая типизация,\nчто такое интерфейс, что такое открытые и закрытые члены класса, что такое исключения, что такое события\nи как их обрабатывать и многое другое. Это потом очень помогло мне при изучении Python и JS.\n", "\nНа Java я писал, как это не покажется сейчас странным, дектопные приложения. Использовал библиотеку Swing.\nДаже умудрился написать несколько игрушек (например, Тетрис) и два простых файловых менеджера. Все эти\nпроекты до сих пор лежат в моём аккаунте на github.\n", "\nНо потом я решил поработать немного с языком Python. Сначала просто для того, чтобы иметь о нем какое-то\nбазовое представление. Но я быстро понял, что он превосходит Java если и не во всём, то уж точно в очень многих\nаспектах.\n", "\nPython чрезвычайно лаконичен, но при этом код на нем, не теряет читаемости. Сходные задачи на Python решаются\nменьшим количеством кода, чем на Java. Python не заставляет подчиняться только одной парадигме (ООП) и\nдает возможность выбирать, в каком-стиле писать - объектно-ориентированном, процедурном или функциональном.\nОтсутствие строгой типизации дает возможность еще более гибкой работы с объектами, чем в Java. В Python буквально\nсо старта обучения доступны такие типы как list, dict и set. Для работы с чем-то похожим в Java придется освоить\nцелый микрофреймворк - Collection Framework.\n", "\nЯ мог бы еще долго рассказывать, чем мне понравился Python, но познакомившись с ним, я сразу отказался от Java\nи больше не возвращался к ней. Я думаю, что за Python - будущее.\n", "\nПервыми моими проектами на Python были игры.\n", "\nНа самом деле написание игр, как я считаю, является прекрасным упражнением при изучении, наверное, любого языка.\nЕсть, конечно, сайты типа Сodewars с массой упражнений разной степени сложности для отработки навыков. Но у меня с\nтакими сайтами как-то не срослось. Выполнение упражнений наводило на меня тоску. Да, я получал результат, но я не\nполучал никакого конечного продукта. Результатом таких тренировок не могла стать программа, которую можно было бы\nвзять, запустить и пользоваться ею. Поэтому я изначально взял курс именно на создание готовых программных продуктов,\nимеющих какую-то, пусть и простую, но функциональность.\n", "\nТак как уже довольно давно происходит переход ко все большему использованию WEB-сервисов вместо\nлокально устанавливаемых приложений, то освоение соответствующих технологий представлялось мне логичным шагом после\nизучения основ языка. Я посмотрел, что может предложить мне в этом плане Python. Так я узнал о фреймворке Django и о том,\nчто с его помощью можно быстро создать какой-либо сайт и запустить его пусть даже и локально.\n", "\nПервые мои попытки что-то сделать были очень корявыми :) Сказывалось незнание основ: что такое http-методы, что такое\nзоголовки, что такое api, какой пусть запрос и ответ на него проделывают внутри самого Django и т.д.\n", "\nНо постепенно я набирался знаний в этой области и дело пошло на лад.\n", "\nНо используя один только Python и Django нельзя заставить страницы выглядеть хоть сколько-нибудь красиво и быть\nфункциональными. Я понял, что мне требуется изучить основы сначала CSS (для придания аккуратного внешнего вида),\nа затем и JS (ибо без интерактивности web-страницы представить сейчас просто невозможно)."]}