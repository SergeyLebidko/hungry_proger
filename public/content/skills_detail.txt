{"header": ["Как начинающий разработчик-самоучка я, естественно, пока не могу похвастаться\nдоскональным знанием какого-либо языка, библиотеки или фреймворка. Для этого нужны\nгоды работы на реальных проектах, но, тем не менее, я уже успел познакомится с некоторыми\nшироко распространенными технологиями, понять зачем они нужны и какие задачи решают и хочу\nнемного рассказать об этом своем опыте."], "body": ["Первым языком программирования, который я начал изучать была {Java}. Сейчас я уже не занимаюсь этим\nязыком, так как полностью перешел на {Python} и {JS} (и не вижу ни одной причины, по которой {Java}\nбыла бы лучше {Python}), но я не считаю, что зря потратил время работая с этим языком.\n", "\nРаботая с {Java} я изучил основные концепции ООП, узнал что такое статическая и динамическая типизация,\nчто такое интерфейс, что такое открытые и закрытые члены класса, что такое исключения, что такое события\nи как их обрабатывать и многое другое. Это потом очень помогло мне при изучении {Python} и {JS}.\n", "\nНа {Java} я писал, как это не покажется сейчас странным, дектопные приложения. Использовал библиотеку {Swing}.\nДаже умудрился написать несколько игрушек (например, Тетрис) и два простых файловых менеджера. Все эти\nпроекты до сих пор лежат в моём аккаунте на {github}.\n", "\nНо потом я решил поработать немного с языком {Python}. Сначала просто для того, чтобы иметь о нем какое-то\nбазовое представление. Но я быстро понял, что он превосходит {Java} если и не во всём, то уж точно в очень многих\nаспектах.\n", "\n{Python} чрезвычайно лаконичен, но при этом код на нем, не теряет читаемости. Сходные задачи на {Python} решаются\nменьшим количеством кода, чем на {Java}. {Python} не заставляет подчиняться только одной парадигме (ООП, как в {Java}) и\nдает возможность выбирать, в каком-стиле писать код. Отсутствие строгой типизации дает возможность еще более гибкой\nработы с объектами, чем в {Java}. В {Python} буквально со старта обучения доступны такие типы как list, dict и set.\nДля работы с чем-то похожим в {Java} придется освоить целый микрофреймворк - {Collection Framework}.\n", "\nЯ мог бы еще долго рассказывать, чем мне понравился {Python}, но познакомившись с ним, я сразу отказался от {Java}\nи больше не возвращался к ней. Я думаю, что за {Python} - будущее.\n", "\nПервыми моими проектами на {Python} были игры.\n", "\nНа самом деле написание игр, как я считаю, является прекрасным упражнением при изучении, наверное, любого языка.\nЕсть, конечно, сайты типа [https://www.codewars.com/][codewars] с массой упражнений разной степени сложности для\nотработки навыков. Но у меня с такими сайтами как-то не срослось. Выполнение упражнений наводило на меня тоску. Да, я\nполучал результат, но я не получал никакого конечного продукта. Результатом таких тренировок не могла стать программа,\nкоторую можно было бы взять, запустить и пользоваться ею. Поэтому я изначально взял курс именно на создание готовых\nпрограммных продуктов, имеющих какую-то, пусть и простую, функциональность.\n", "\nТак как уже довольно давно происходит переход ко все большему использованию WEB-сервисов вместо\nлокально устанавливаемых приложений, то освоение соответствующих технологий представлялось мне логичным шагом после\nизучения основ языка. Я посмотрел, что может предложить мне в этом плане {Python}. Так я узнал о фреймворке {Django} и о том,\nчто с его помощью можно быстро создать какой-либо сайт и запустить его пусть даже и локально.\n", "\nПервые мои попытки что-то сделать были очень корявыми :) Сказывалось незнание элементарных основ: что такое http-методы,\nчто такое заголовки, что такое api, какой путь запрос и ответ на него проделывают внутри самого {Django} и т.д.\n", "\nНо постепенно я набирался знаний в этой области и дело пошло на лад.\n", "\nНо используя один только {Python} и {Django} нельзя заставить страницы выглядеть хоть сколько-нибудь красиво и быть\nфункциональными. Я понял, что мне требуется изучить основы сначала {CSS} (для придания презентабельного внешнего вида),\nа затем и {JS} (ибо без интерактивности web-страницы представить сейчас просто невозможно).\n", "\nВсе началось с простых задач: поменять цвет элемента при нажатии на кнопку, добавить или удалить элемент и т.д.\nНо я быстро понял, что использование чистого {JS} - это весьма неудобно и не зря же для {JS} написали кучу библиотек,\nавтоматизирующих рутинные операции.\n", "\nПервой {JS}-библиотекой, с которой я начал работать была {jQuery}. Она дала мне на тот момент все, что было нужно:\nлегкое управление созданием и удалением элементов, легкое управление стилями, легкое управление событиями и (наверное,\nсамое главное) очень простой способ создания ajax-запросов! К тому же мне очень нравилась концепция последовательного\nвыполнения действий над коллекцией {jQuery}, когда различные действия можно просто выстраивать в цепочку в одной строке!\nЯ был восхищен.\n", "\nРовно до того момента, когда захотел написать на {jQuery}, {Django} и {Django Rest Framework} некое подобие простой\nинформационной системы для учета товаров на складе. С бэкендом проблем не возникло, а вот с фронтендом возникла масса\nсложностей. {HTML} и {JS}-код находились в разных частях файла, что было очень неудобно. Код, который управляет компонентами\nбыл далеко от самих компонетов. Но самой большой проблемой было даже не это, а необходимость учитывать и следить за\nвзаимосвязями между различными элементами страницы. {jQuery} хорошо работал для упрощения рутинных операций, но\nвзаимодействие между элементами (списками, таблицами, полями ввода и т.д.) он никак не упрощал...\n", "\nМне нужно было что-то подобное компонентам интерфейса {Swing} в языке {Java}, но для среды браузера. Так я подошел к\nизучению библиотеки {React}.\n", "\nС помощью {React} я решил проблему взаимодействия компонентов и первый же написанный на нем pet-проект дался мне\nсущественно проще, чем до этого аналогичный на {jQuery}. К тому же концепция компонентов в {React} похожа на концепцию\nкомпонентов в {Swing}, с которым я уже был знаком. Это очень помогло мне в понимании принципов работы библиотеки.\n", "\nСейчас я продолжаю осваивать возможности {React}, параллельно стараюсь не забывать о {Python} и ищу работу на реальном\nпроекте, которая позволила бы мне прокачивать скилл разработчика."]}