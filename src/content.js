export const aboutMe = {
  "header": [
    "Здравствуйте! Я начинающий web-разработчик.\n",
    "\nЯ всегда интересовался компьютерной тематикой и в какой-то момент\nрешил начать осваивать программирование. Я учусь самостоятельно, в основном\nпо книгам. Осваиваю языки {Python} и {JavaScript}.\nИмею навыки работы с фреймворком {Django} и библиотекой {React}.\n",
    "\nУже сейчас я могу разработать с нуля небольшое web-приложение\nи реализовать как backend-, так и frontend-часть. Помимо web-приложений\nпишу небольшие игры на {Python} (в основном головоломки и логические игры).\nСвои работы выкладываю в git-репозиторий. Сейчас у меня уже почти 60\nреализованных pet-проектов различной степени сложности.\n",
    "\nВ настоящий момент ищу работу, на которой я мог бы прокачивать навыки,\nучаствуя в реальных проектах и общаясь с опытными людьми."
  ],
  "body": [
    "В школе мне всегда легко давались точные науки - алгебра, геометрия,\nфизика и информатика. Я несколько раз участвовал в олимпиадах по\nинформатике и занимал там призовые места. Естественно, что после школы я\nпланировал \"пойти на программиста\", но по причинам, от меня не зависящим,\nпришлось выбрать несколько иную специальность, которая называлась\n\"Прикладная информатика в экономике\".\n",
    "\nТак как учился я заочно, то и работать начал рано: в 18 лет. Был оператором ЭВМ,\nзатем устроился инженером по автоматизации. За десять последующих лет сменил\nнесколько мест работы. Но везде занимался, по сути, обеспечением работы парка\nкомпьютерной и оргтехники. Помощь пользователям, заправка картриджей, установка\nи настройка необходимого для работы офиса ПО, ведение документации (что практически\nвезде и всегда отнимало массу времени).\n",
    "\nОднако работа не приносила ни удовлетворения, ни желаемых доходов. Хотелось чего-то\nболее творческого и более прибыльного. К тому же, будучи, по сути, эникейщиком, я не мог\nсчитать себя полноценным IT-специалистом. В сущности, я был просто очень\nпродвинутям пользователем.\n",
    "\nИ я решил вернуться к оставленным еще в школе занятиям программированием.\n",
    "\nСледует заметить, что в ВУЗе у нас был небольшой курс программирования на ЯВУ (языке\nвысокого уровня). Но этим языком преподавателями был выбран уже тогда считавшийся устаревшим Pascal.\nЯ легко сдал экзамен по этому предмету и это придало мне уверенности. Но так как Pascal к тому времени\nокончательно канул в лету, то надо было выбрать другой язык.\n",
    "\nЯ выбрал {Java}.\n",
    "\n{Java} на тот момент была в топе языков программирования и, уж конечно, её не могла постигнуть\nучасть {Pascal} в сколько-нибудь обозримом будущем. Начал я с базового самоучителя Герберта Шилдта по\nосновам {Java} и постепенно от самых основ продвигался все дальше. Я завел github-аккаунт (довольно долгое\nвремя используя его только как средство удобного разделения работы между офисным и домашним компьютерами,\nблаго тогда была возможность немного кодить еще и на работе).\n",
    "\nНа {Java} были написаны мои первые проекты. Их репозитории до сих пор остались в моём github и я не\nпланирую их оттуда удалять. Хотя сейчас я уже не занимаюсь этим языком, но не считаю время, потраченное на\nего изучение проведенным зря. {Java} дала мне очень много. Я познакомился с такими понятиями как ООП (и его\nбазовыми принципами: наследованием, инкапсуляцией и полиморфизмом), научился разбивать код на отдельные модули,\nпознакомился со статической типизацией, узнал, что такое методы и базовые структуры данных - массив, список,\nстек, дек, хэш-таблица. {Java} заложила, как мне кажется, неплохой фундамент.\n",
    "\nНо я все чаще начал слышать о языке {Python} и решил познакомится и с ним. Вначале, чтобы просто иметь о нем\nкакое-то общее представление. И {Python} меня затянул. Великолепный язык, превосходящий {Java} в очень многих аспектах!\n",
    "\nТак как одной из сфер практического применения {Python} является web-разработка, я начал двигаться в этом\nнаправлении. Так я узнал о фреймворке {Django} и начал писать на нем простейшие проекты.\n",
    "\nОднако, проекты, которые можно делать, используя только лишь {Python}, {HTML} и {CSS} сильно страдают из-за отсутствия\nинтерактивности страниц. Я понял, что без хотя бы минимального понимания {JavaScript} не обойтись. Так я познакомился\nс языком, о котором сделано больше всего мемов :) Первой {JS}-библиотекой, с которой я начал работать была {jQuery}.\n",
    "\n{jQuery} очень помогал мне с созданием кода для простых операций, типа добавления и удаления элементов (а особенно с\nвыполнением ajax-запросов). Но я быстро понял, что она совершенно не пригодна тогда, когда на странице много элементов,\nсостояние которых должно быть взаимосвязано.\n",
    "\nМне нужно было что-то, с чем можно было бы легко организовать отдельные элементы страниц в компоненты и управлять\nвзаимодействием этих компонентов. Так я узнал о {React} и его подходе к созданию компонентов.\n",
    "\nСейчас я параллельно занимаюсь языком {Python}, пишу код на {React} (в том числе и этот сайт) и ищу работу.\nОт работодателя, помимо очевидных вещей - оформления по ТК этой страны, белой ЗП - хочу также получить возможность\nнабраться реального опыта на реальных проектах и в общении с более скилловыми коллегами (самообразование и работа\nнад pet-проектами - это, конечно, хорошо, но реальный \"боевой\" опыт они заменить не могут).\n",
    "\nЧто касается стека, то я мог бы продолжить развитие как в {React} (frontend), так и в {Django} (backend)."
  ]
}

export const projects = [
  {
    "git": "https://github.com/SergeyLebidko/Abalone",
    "title": "Abalone",
    "description": "Реализация настольной игры \"Абалон\", созданной французскими игровыми дизайнерами в 1987 году.",
    "tech_list": [
      "Python",
      "pygame"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/graphite_client",
    "title": "Graphite",
    "description": "Платформа для ведения блогов. Мой первый проект, в котором фронтэнд написан полностью на React",
    "tech_list": [
      "Python",
      "Django",
      "DRF",
      "React",
      "CSS"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/MiniStorage",
    "title": "MiniStorage",
    "description": "Простая система ведения учета на небольшом складе с базовым набором возможностей",
    "tech_list": [
      "DRF",
      "JavaScript",
      "jQuery",
      "CSS",
      "Python",
      "Django"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/Hexagon",
    "title": "Hexagon",
    "description": "Игра-пазл на поле из гексов",
    "tech_list": [
      "Python",
      "pygame"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/hungry_proger",
    "title": "hProger",
    "description": "Сайт, на котором вы сейчас находитесь. Можете кликнуть на логотип github'a в углу карточки и посмотреть его исходный код :)",
    "tech_list": [
      "React",
      "paper.js",
      "CSS",
      "SCSS"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/PyChess",
    "title": "PyChess",
    "description": "Шахматы на Python. Один из первых моих проектов на этом языке",
    "tech_list": [
      "Python",
      "pygame"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/LiteInventory",
    "title": "LiteInventory",
    "description": "Небольшой сервис для учета компьютерной и оргтехники",
    "tech_list": [
      "Python",
      "Django",
      "DRF"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/soccer_stat",
    "title": "Soccer Stat",
    "description": "Небольшой сервис для просмотра футбольной статистики, основанный на бесплатном API сайта www.football-data.org",
    "tech_list": [
      "React",
      "HTML",
      "CSS"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/WhiteLinen",
    "title": "WhiteLinen",
    "description": "Проект простого сайта-визитки для небольшой дизайн-студии. Мой первый опыт в верстке лендинга",
    "tech_list": [
      "HTML",
      "CSS",
      "jQuery"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/need_for_drive",
    "title": "Need for drive",
    "description": "Сайт для сервиса каршеринга, разработанный в рамках практикума в компании SimbirSoft",
    "tech_list": [
      "React",
      "Redux",
      "React Router"
    ]
  },
  {
    "git": "https://github.com/SergeyLebidko/need_for_drive_admin",
    "title": "NFD Admin",
    "description": "Административная панель для сервиса каршеринга, разработанная в рамках практикума в компании SimbirSoft",
    "tech_list": [
      "React",
      "Redux",
      "React Router"
    ]
  }
]

export const skills = [
  "Python",
  "Django",
  "HTML",
  "CSS",
  "React"
]

export const contacts = [
  {
    "url": "https://github.com/SergeyLebidko",
    "logo": "git_logo.png"
  },
  {
    "url": "tg://resolve?domain=@sergeyler",
    "logo": "telegram_logo.png"
  },
  {
    "url": "https://krasnodar.hh.ru/resume/7a068d12ff072536a70039ed1f514b58767550",
    "logo": "hh_logo.png"
  },
  {
    "url": "mailto:sergeyler@gmail.com",
    "logo": "email_logo.png"
  }
]

export const skillsDetail = {
  "header": [
    "Как начинающий разработчик-самоучка я, естественно, пока не могу похвастаться\nдоскональным знанием какого-либо языка, библиотеки или фреймворка. Для этого нужны\nгоды работы на реальных проектах, но, тем не менее, я уже успел познакомится с некоторыми\nшироко распространенными технологиями, понять зачем они нужны и какие задачи решают и хочу\nнемного рассказать об этом своем опыте."
  ],
  "body": [
    "Первым языком программирования, который я начал изучать была {Java}. Сейчас я уже не занимаюсь этим\nязыком, так как полностью перешел на {Python} и {JS} (и не вижу ни одной причины, по которой {Java}\nбыла бы лучше {Python}), но я не считаю, что зря потратил время работая с этим языком.\n",
    "\nРаботая с {Java} я изучил основные концепции ООП, узнал что такое статическая и динамическая типизация,\nчто такое интерфейс, что такое открытые и закрытые члены класса, что такое исключения, что такое события\nи как их обрабатывать и многое другое. Это потом очень помогло мне при изучении {Python} и {JS}.\n",
    "\nНа {Java} я писал, как это не покажется сейчас странным, дектопные приложения. Использовал библиотеку {Swing}.\nДаже умудрился написать несколько игрушек (например, Тетрис) и два простых файловых менеджера. Все эти\nпроекты до сих пор лежат в моём аккаунте на {github}.\n",
    "\nНо потом я решил поработать немного с языком {Python}. Сначала просто для того, чтобы иметь о нем какое-то\nбазовое представление. Но я быстро понял, что он превосходит {Java} если и не во всём, то уж точно в очень многих\nаспектах.\n",
    "\n{Python} чрезвычайно лаконичен, но при этом код на нем, не теряет читаемости. Сходные задачи на {Python} решаются\nменьшим количеством кода, чем на {Java}. {Python} не заставляет подчиняться только одной парадигме (ООП, как в {Java}) и\nдает возможность выбирать, в каком-стиле писать код. Отсутствие строгой типизации дает возможность еще более гибкой\nработы с объектами, чем в {Java}. В {Python} буквально со старта обучения доступны такие типы как list, dict и set.\nДля работы с чем-то похожим в {Java} придется освоить целый микрофреймворк - {Collection Framework}.\n",
    "\nЯ мог бы еще долго рассказывать, чем мне понравился {Python}, но познакомившись с ним, я сразу отказался от {Java}\nи больше не возвращался к ней. Я думаю, что за {Python} - будущее.\n",
    "\nПервыми моими проектами на {Python} были игры.\n",
    "\nНа самом деле написание игр, как я считаю, является прекрасным упражнением при изучении, наверное, любого языка.\nЕсть, конечно, сайты типа [https://www.codewars.com/][codewars] с массой упражнений разной степени сложности для\nотработки навыков. Но у меня с такими сайтами как-то не срослось. Выполнение упражнений наводило на меня тоску. Да, я\nполучал результат, но я не получал никакого конечного продукта. Результатом таких тренировок не могла стать программа,\nкоторую можно было бы взять, запустить и пользоваться ею. Поэтому я изначально взял курс именно на создание готовых\nпрограммных продуктов, имеющих какую-то, пусть и простую, функциональность.\n",
    "\nТак как уже довольно давно происходит переход ко все большему использованию WEB-сервисов вместо\nлокально устанавливаемых приложений, то освоение соответствующих технологий представлялось мне логичным шагом после\nизучения основ языка. Я посмотрел, что может предложить мне в этом плане {Python}. Так я узнал о фреймворке {Django} и о том,\nчто с его помощью можно быстро создать какой-либо сайт и запустить его пусть даже и локально.\n",
    "\nПервые мои попытки что-то сделать были очень корявыми :) Сказывалось незнание элементарных основ: что такое http-методы,\nчто такое заголовки, что такое api, какой путь запрос и ответ на него проделывают внутри самого {Django} и т.д.\n",
    "\nНо постепенно я набирался знаний в этой области и дело пошло на лад.\n",
    "\nНо используя один только {Python} и {Django} нельзя заставить страницы выглядеть хоть сколько-нибудь красиво и быть\nфункциональными. Я понял, что мне требуется изучить основы сначала {CSS} (для придания презентабельного внешнего вида),\nа затем и {JS} (ибо без интерактивности web-страницы представить сейчас просто невозможно).\n",
    "\nВсе началось с простых задач: поменять цвет элемента при нажатии на кнопку, добавить или удалить элемент и т.д.\nНо я быстро понял, что использование чистого {JS} - это весьма неудобно и не зря же для {JS} написали кучу библиотек,\nавтоматизирующих рутинные операции.\n",
    "\nПервой {JS}-библиотекой, с которой я начал работать была {jQuery}. Она дала мне на тот момент все, что было нужно:\nлегкое управление созданием и удалением элементов, легкое управление стилями, легкое управление событиями и (наверное,\nсамое главное) очень простой способ создания ajax-запросов! К тому же мне очень нравилась концепция последовательного\nвыполнения действий над коллекцией {jQuery}, когда различные действия можно просто выстраивать в цепочку в одной строке!\nЯ был восхищен.\n",
    "\nРовно до того момента, когда захотел написать на {jQuery}, {Django} и {Django Rest Framework} некое подобие простой\nинформационной системы для учета товаров на складе. С бэкендом проблем не возникло, а вот с фронтендом возникла масса\nсложностей. {HTML} и {JS}-код находились в разных частях файла, что было очень неудобно. Код, который управляет компонентами\nбыл далеко от самих компонетов. Но самой большой проблемой было даже не это, а необходимость учитывать и следить за\nвзаимосвязями между различными элементами страницы. {jQuery} хорошо работал для упрощения рутинных операций, но\nвзаимодействие между элементами (списками, таблицами, полями ввода и т.д.) он никак не упрощал...\n",
    "\nМне нужно было что-то подобное компонентам интерфейса {Swing} в языке {Java}, но для среды браузера. Так я подошел к\nизучению библиотеки {React}.\n",
    "\nС помощью {React} я решил проблему взаимодействия компонентов и первый же написанный на нем pet-проект дался мне\nсущественно проще, чем до этого аналогичный на {jQuery}. К тому же концепция компонентов в {React} похожа на концепцию\nкомпонентов в {Swing}, с которым я уже был знаком. Это очень помогло мне в понимании принципов работы библиотеки.\n",
    "\nСейчас я продолжаю осваивать возможности {React}, параллельно стараюсь не забывать о {Python} и ищу работу на реальном\nпроекте, которая позволила бы мне прокачивать скилл разработчика."
  ]
}